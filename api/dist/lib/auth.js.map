{
  "version": 3,
  "sources": ["../../src/lib/auth.js"],
  "sourcesContent": ["import { AuthenticationError, ForbiddenError } from '@redwoodjs/graphql-server'\n\nimport { db } from './db'\n\n/**\n * The session object sent in as the first argument to getCurrentUser() will\n * have a single key `id` containing the unique ID of the logged in user\n * (whatever field you set as `authFields.id` in your auth function config).\n * You'll need to update the call to `db` below if you use a different model\n * name or unique field name, for example:\n *\n *   return await db.profile.findUnique({ where: { email: session.id } })\n *                   ───┬───                       ──┬──\n *      model accessor ─┘      unique id field name ─┘\n *\n * !! BEWARE !! Anything returned from this function will be available to the\n * client--it becomes the content of `currentUser` on the web side (as well as\n * `context.currentUser` on the api side). You should carefully add additional\n * fields to the `select` object below once you've decided they are safe to be\n * seen if someone were to open the Web Inspector in their browser.\n */\nexport const getCurrentUser = async (session) => {\n  if (!session || typeof session.id !== 'number') {\n    throw new Error('Invalid session')\n  }\n\n  return await db.user.findUnique({\n    where: { id: session.id },\n    select: { id: true, email: true },\n  })\n}\n\n/**\n * The user is authenticated if there is a currentUser in the context\n *\n * @returns {boolean} - If the currentUser is authenticated\n */\nexport const isAuthenticated = () => {\n  return !!context.currentUser\n}\n\n/**\n * When checking role membership, roles can be a single value, a list, or none.\n * You can use Prisma enums too (if you're using them for roles), just import your enum type from `@prisma/client`\n */\n\n/**\n * Checks if the currentUser is authenticated (and assigned one of the given roles)\n *\n * @param roles: {@link AllowedRoles} - Checks if the currentUser is assigned one of these roles\n *\n * @returns {boolean} - Returns true if the currentUser is logged in and assigned one of the given roles,\n * or when no roles are provided to check against. Otherwise returns false.\n */\nexport const hasRole = (roles) => {\n  if (!isAuthenticated()) {\n    return false\n  }\n\n  const currentUserRoles = context.currentUser?.roles\n\n  if (typeof roles === 'string') {\n    if (typeof currentUserRoles === 'string') {\n      // roles to check is a string, currentUser.roles is a string\n      return currentUserRoles === roles\n    } else if (Array.isArray(currentUserRoles)) {\n      // roles to check is a string, currentUser.roles is an array\n      return currentUserRoles?.some((allowedRole) => roles === allowedRole)\n    }\n  }\n\n  if (Array.isArray(roles)) {\n    if (Array.isArray(currentUserRoles)) {\n      // roles to check is an array, currentUser.roles is an array\n      return currentUserRoles?.some((allowedRole) =>\n        roles.includes(allowedRole)\n      )\n    } else if (typeof currentUserRoles === 'string') {\n      // roles to check is an array, currentUser.roles is a string\n      return roles.some((allowedRole) => currentUserRoles === allowedRole)\n    }\n  }\n\n  // roles not found\n  return false\n}\n\n/**\n * Use requireAuth in your services to check that a user is logged in,\n * whether or not they are assigned a role, and optionally raise an\n * error if they're not.\n *\n * @param roles: {@link AllowedRoles} - When checking role membership, these roles grant access.\n *\n * @returns - If the currentUser is authenticated (and assigned one of the given roles)\n *\n * @throws {@link AuthenticationError} - If the currentUser is not authenticated\n * @throws {@link ForbiddenError} If the currentUser is not allowed due to role permissions\n *\n * @see https://github.com/redwoodjs/redwood/tree/main/packages/auth for examples\n */\nexport const requireAuth = ({ roles } = {}) => {\n  if (!isAuthenticated()) {\n    throw new AuthenticationError(\"You don't have permission to do that.\")\n  }\n\n  if (roles && !hasRole(roles)) {\n    throw new ForbiddenError(\"You don't have access to do that.\")\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BAAoD;AAEpD,gBAAmB;AAmBZ,MAAMA,iBAAiB,OAAOC,YAAY;AAC/C,MAAI,CAACA,WAAW,OAAOA,QAAQC,OAAO,UAAU;AAC9C,UAAM,IAAIC,MAAM,iBAAiB;EACnC;AAEA,SAAO,MAAMC,aAAGC,KAAKC,WAAW;IAC9BC,OAAO;MAAEL,IAAID,QAAQC;IAAG;IACxBM,QAAQ;MAAEN,IAAI;MAAMO,OAAO;IAAK;EAClC,CAAC;AACH;AAOO,MAAMC,kBAAkBA,MAAM;AACnC,SAAO,CAAC,CAACC,8BAAQC;AACnB;AAeO,MAAMC,UAAWC,WAAU;AAChC,MAAI,CAACJ,gBAAgB,GAAG;AACtB,WAAO;EACT;AAEA,QAAMK,mBAAmBJ,8BAAQC,aAAaE;AAE9C,MAAI,OAAOA,UAAU,UAAU;AAC7B,QAAI,OAAOC,qBAAqB,UAAU;AAExC,aAAOA,qBAAqBD;IAC9B,eAAWE,gBAAAA,SAAcD,gBAAgB,GAAG;AAE1C,aAAOA,kBAAkBE,KAAMC,iBAAgBJ,UAAUI,WAAW;IACtE;EACF;AAEA,UAAIF,gBAAAA,SAAcF,KAAK,GAAG;AACxB,YAAIE,gBAAAA,SAAcD,gBAAgB,GAAG;AAEnC,aAAOA,kBAAkBE,KAAMC,qBAC7BC,gBAAAA,SAAAL,KAAK,EAAAM,KAALN,OAAeI,WAAW,CAC5B;IACF,WAAW,OAAOH,qBAAqB,UAAU;AAE/C,iBAAOM,YAAAA,SAAAP,KAAK,EAAAM,KAALN,OAAYI,iBAAgBH,qBAAqBG,WAAW;IACrE;EACF;AAGA,SAAO;AACT;AAgBO,MAAMI,cAAcA,CAAC;EAAER;AAAM,IAAI,CAAC,MAAM;AAC7C,MAAI,CAACJ,gBAAgB,GAAG;AACtB,UAAM,IAAIa,0CAAoB,uCAAuC;EACvE;AAEA,MAAIT,SAAS,CAACD,QAAQC,KAAK,GAAG;AAC5B,UAAM,IAAIU,qCAAe,mCAAmC;EAC9D;AACF;",
  "names": ["getCurrentUser", "session", "id", "Error", "db", "user", "findUnique", "where", "select", "email", "isAuthenticated", "context", "currentUser", "hasRole", "roles", "currentUserRoles", "_Array$isArray", "some", "allowedRole", "_includesInstanceProperty", "call", "_someInstanceProperty", "requireAuth", "AuthenticationError", "ForbiddenError"]
}
