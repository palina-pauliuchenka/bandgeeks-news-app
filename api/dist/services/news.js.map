{
  "version": 3,
  "sources": ["../../src/services/news.js"],
  "sourcesContent": ["const API_KEY = process.env.API_KEY\nconst getArticles = async ({ criteria }) => {\n  const categories = [\n    'general',\n    'business',\n    'entertainment',\n    'technology',\n    'sports',\n    'health',\n    'science',\n  ]\n\n  let articles = []\n  let totalResults = 0\n\n  if (categories.includes(criteria)) {\n    // Get articles from the nav bar button category\n    const response = await fetch(\n      `https://newsapi.org/v2/top-headlines?country=us&category=${criteria}&apiKey=${API_KEY}`\n    )\n    const json = await response.json()\n\n    articles = json.articles.map((article) => ({\n      ...article,\n      category: criteria,\n    }))\n    totalResults = json.totalResults\n  } else if (criteria.includes('/')) {\n    // User settings with multiple categories\n    const choices = criteria.split('/')\n    choices.pop()\n\n    for (let i = 0; i < choices.length; i++) {\n      const response = await fetch(\n        `https://newsapi.org/v2/top-headlines?country=us&category=${choices[i]}&apiKey=${API_KEY}`\n      )\n      const json = await response.json()\n\n      if (Array.isArray(json.articles)) {\n        const articlesWithCategory = json.articles.map((article) => ({\n          ...article,\n          category: choices[i],\n        }))\n\n        articles = [...articles, ...articlesWithCategory]\n        totalResults += json.totalResults\n      }\n    }\n  } else {\n    // Search criteria\n    const response = await fetch(\n      `https://newsapi.org/v2/everything?q=${criteria}&apiKey=${API_KEY}`\n    )\n    const json = await response.json()\n\n    articles = json.articles.map((article) => ({\n      ...article,\n      category: criteria,\n    }))\n    totalResults = json.totalResults\n  }\n\n  return {\n    totalResults: totalResults,\n    articles: articles,\n  }\n}\n\nexport default getArticles\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,UAAUC,QAAQC,IAAIF;AAC5B,MAAMG,cAAc,OAAO;EAAEC;AAAS,MAAM;AAC1C,QAAMC,aAAa,CACjB,WACA,YACA,iBACA,cACA,UACA,UACA,SAAS;AAGX,MAAIC,WAAW,CAAA;AACf,MAAIC,eAAe;AAEnB,UAAIC,gBAAAA,SAAAH,UAAU,EAAAI,KAAVJ,YAAoBD,QAAQ,GAAG;AAAA,QAAAM;AAEjC,UAAMC,WAAW,MAAMC,MACpB,4DAA2DR,mBAAmBJ,SACjF;AACA,UAAMa,OAAO,MAAMF,SAASE,KAAK;AAEjCP,mBAAWQ,WAAAA,SAAAJ,WAAAG,KAAKP,QAAQ,EAAAG,KAAAC,UAAMK,cAAa;MACzC,GAAGA;MACHC,UAAUZ;IACZ,EAAE;AACFG,mBAAeM,KAAKN;EACtB,eAAWC,gBAAAA,SAAAJ,QAAQ,EAAAK,KAARL,UAAkB,GAAG,GAAG;AAEjC,UAAMa,UAAUb,SAASc,MAAM,GAAG;AAClCD,YAAQE,IAAI;AAEZ,aAASC,IAAI,GAAGA,IAAIH,QAAQI,QAAQD,KAAK;AACvC,YAAMT,WAAW,MAAMC,MACpB,4DAA2DK,QAAQG,CAAC,YAAYpB,SACnF;AACA,YAAMa,OAAO,MAAMF,SAASE,KAAK;AAEjC,cAAIS,gBAAAA,SAAcT,KAAKP,QAAQ,GAAG;AAAA,YAAAiB;AAChC,cAAMC,2BAAuBV,WAAAA,SAAAS,YAAAV,KAAKP,QAAQ,EAAAG,KAAAc,WAAMR,cAAa;UAC3D,GAAGA;UACHC,UAAUC,QAAQG,CAAC;QACrB,EAAE;AAEFd,mBAAW,CAAC,GAAGA,UAAU,GAAGkB,oBAAoB;AAChDjB,wBAAgBM,KAAKN;MACvB;IACF;EACF,OAAO;AAAA,QAAAkB;AAEL,UAAMd,WAAW,MAAMC,MACpB,uCAAsCR,mBAAmBJ,SAC5D;AACA,UAAMa,OAAO,MAAMF,SAASE,KAAK;AAEjCP,mBAAWQ,WAAAA,SAAAW,YAAAZ,KAAKP,QAAQ,EAAAG,KAAAgB,WAAMV,cAAa;MACzC,GAAGA;MACHC,UAAUZ;IACZ,EAAE;AACFG,mBAAeM,KAAKN;EACtB;AAEA,SAAO;IACLA;IACAD;EACF;AACF;AAEA,IAAA,eAAeH;",
  "names": ["API_KEY", "process", "env", "getArticles", "criteria", "categories", "articles", "totalResults", "_includesInstanceProperty", "call", "_context", "response", "fetch", "json", "_mapInstanceProperty", "article", "category", "choices", "split", "pop", "i", "length", "_Array$isArray", "_context2", "articlesWithCategory", "_context3"]
}
